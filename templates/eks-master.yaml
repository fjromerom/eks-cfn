AWSTemplateFormatVersion: "2010-09-09"
Description: >
  The stack deploys an EKS Cluster v1.16 with the following features:
  - Cluster endpoint access is private and only accessible through the VPC
  - EKS worker nodes are deployed by Managed Node Groups
  - Cluster Autoscaler is enabled by default
  - EFS storage class can be enabled optionally
  - An EC2 instance is also deployed and preconfigured to manage the EKS cluster
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PrivateSubnet3ID
      - Label:
          default: Amazon EKS configuration
        Parameters:
          - ManagedNodeGroupAMIType
          - NodeInstanceType
          - NumberOfNodes
          - MaxNumberOfNodes
      - Label:
          default: Optional Kubernetes add-ins
        Parameters:
          - EfsStorageClass
    ParameterLabels:
      VPCID:
        default: VPC ID
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      PrivateSubnet3ID:
        default: Private subnet 3 ID
      ManagedNodeGroupAMIType:
        default: Managed Node Group AMI type
      NodeInstanceType:
        default: EKS worker nodes instance type
      NumberOfNodes:
        default: Number of EKS worker nodes
      MaxNumberOfNodes:
        default: Maximum number of EKS worker nodes
      EfsStorageClass:
        default: EFS storage class
Parameters:
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: The ID of an existing VPC
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in Availability Zone 1
  PrivateSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in Availability Zone 2
  PrivateSubnet3ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: The ID of the private subnet in Availability Zone 3
  S3BucketName:
    Description: The S3 bucket name for the assets.
    Type: String
  S3KeyPrefix:
    Description: The S3 key prefix for the assets.
    Type: String
  S3BucketRegion:
    Description: The AWS Region where the bucket is hosted.
    Type: String
  EKSClusterLoggingTypes:
    Default: "api,audit,authenticator,controllerManager,scheduler"
    Type: List<String>
    AllowedPattern: "^(api|audit|authenticator|controllerManager|scheduler|,)*$"
    ConstraintDescription: Valid logging types are api, audit, authenticator, controllerManager, scheduler.
    Description: EKS cluster control plane logs to be exported to CloudWatch Logs.
  NodeInstanceType:
    Default: m5.xlarge
    Description: The EC2 instance type for the EKS worker nodes. Bear in mind that if you select GPU AMI type the instance type must be GPU supported, i.e. g4dn.xlarge.
    Type: String
  NumberOfNodes:
    Default: 3
    Description: The number of EKS worker nodes. The default is one for each of the three Availability Zones.
    Type: Number
  MaxNumberOfNodes:
    Default: 6
    Description: The maximum number of EKS worker nodes.
    Type: Number
  ManagedNodeGroupAMIType:
    Default: "AL2_x86_64"
    Description: The AMI type used for the EKS Managed Node Group.
    AllowedValues: [ "AL2_x86_64", " AL2_x86_64_GPU"]
    Type: String
  KubernetesVersion:
    Default: "1.16"
    Description: The EKS control plane version.
    AllowedValues: [ "1.16" ]
    Type: String
  EfsStorageClass:
    Default: Disabled
    AllowedValues: [ Enabled, Disabled ]
    Description: It creates an EFS filesystem and deploys the efs-provisioner to mount the EFS filesystem as persistent volumes.
    Type: String
Conditions:
  EnableEfs: !Equals [!Ref 'EfsStorageClass', 'Enabled']
Resources:
  EC2InstanceForEKSPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "AllowEKSClusterOperations"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "eks:DescribeCluster"
              - "eks:DescribeUpdate"
              - "eks:ListUpdates"
              - "eks:UpdateClusterVersion"
            Resource: !Sub "arn:${AWS::Partition}:eks:${AWS::Region}:${AWS::AccountId}:cluster/${EKSControlPlane.Outputs.EKSName}"
      Roles:
        - !GetAtt IAMStack.Outputs.EC2InstanceRole
  EC2InstanceForEKSStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-ec2instance.yaml'
      Parameters:
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        S3BucketName: !Ref S3BucketName
        S3KeyPrefix: !Ref S3KeyPrefix
        S3BucketRegion: !Ref S3BucketRegion
        AlternativeIAMRole: !GetAtt IAMStack.Outputs.EC2InstanceRole
        EnvironmentVariables: !Sub
          "K8S_CLUSTER_NAME=${EKSControlPlane.Outputs.EKSName},
          K8S_CA_DATA=${EKSControlPlane.Outputs.CAData},
          K8S_ENDPOINT=${EKSControlPlane.Outputs.EKSEndpoint}"
  NodeGroupStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-nodegroup.yaml'
      Parameters:
        EKSSubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
        NodeInstanceType: !Ref NodeInstanceType
        NumberOfNodes: !Ref NumberOfNodes
        MaxNumberOfNodes: !Ref MaxNumberOfNodes
        ManagedNodeGroupAMIType: !Ref ManagedNodeGroupAMIType
        EKSControlPlane: !GetAtt EKSControlPlane.Outputs.EKSName
        NodeInstanceRoleArn: !GetAtt IAMStack.Outputs.NodeInstanceRoleArn
  IAMStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-iam.yaml'
      Parameters:
        S3BucketName: !Ref S3BucketName
        S3KeyPrefix: !Ref S3KeyPrefix
  FunctionStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-functions.yaml'
      Parameters:
        S3BucketName: !Ref S3BucketName
        S3KeyPrefix: !Ref S3KeyPrefix
        KubernetesAdminRoleArn: !GetAtt IAMStack.Outputs.KubernetesAdminRoleArn
        VPCID: !Ref VPCID
        GetCallerArnRoleArn: !GetAtt IAMStack.Outputs.GetCallerArnRoleArn
        CreateVpcRoleRoleArn: !GetAtt IAMStack.Outputs.CreateVpcRoleRoleArn
        RegisterTypeRoleArn: !GetAtt IAMStack.Outputs.RegisterTypeRoleArn
        EksClusterResourceExecutionRoleArn: !GetAtt IAMStack.Outputs.ExecutionRoleArn
        HelmExecutionRoleArn: !GetAtt IAMStack.Outputs.HelmExecutionRoleArn
        LogRoleArn: !GetAtt IAMStack.Outputs.LogDeliveryRoleArn
        EKSSubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
  ClusterAutoScalerStack:
    DependsOn: NodeGroupStack
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-cluster-autoscaler.yaml'
      Parameters:
        NodeInstanceRoleName: !GetAtt IAMStack.Outputs.NodeInstanceRoleName
        EksClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        KubernetesVersion: !Ref KubernetesVersion
        VPCSecurityGroup: !Ref ControlPlaneSecurityGroup
        EKSSubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
  EfsStack:
    Condition: EnableEfs
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-efs.yaml'
      Parameters:
        ClusterName: !GetAtt EKSControlPlane.Outputs.EKSName
        VPCID: !Ref VPCID
        EFSSubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: EKS cluster communication
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
  EKSControlPlane:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub 'https://${S3BucketName}.s3.${S3BucketRegion}.${AWS::URLSuffix}/${S3KeyPrefix}/templates/eks-controlplane.yaml'
      Parameters:
        SecurityGroupIds: !Ref ControlPlaneSecurityGroup
        SubnetIds: !Join [",", [ !Ref PrivateSubnet1ID, !Ref PrivateSubnet2ID, !Ref PrivateSubnet3ID ]]
        RoleArn: !GetAtt IAMStack.Outputs.ControlPlaneRoleArn
        NodeInstanceRoleArn: !GetAtt IAMStack.Outputs.NodeInstanceRoleArn
        KubernetesVersion: !Ref KubernetesVersion
        GetCallerArnLambdaArn: !GetAtt FunctionStack.Outputs.GetCallerArnLambdaArn
        EC2InstanceForEKSRole: !GetAtt IAMStack.Outputs.EC2InstanceRole
        FunctionRoleArn: !GetAtt IAMStack.Outputs.KubernetesAdminRoleArn
        HelmExecutionRoleArn: !GetAtt IAMStack.Outputs.HelmExecutionRoleArn
        EKSClusterLoggingTypes: !Join [ ',', !Ref 'EKSClusterLoggingTypes' ]
Outputs:
  EKSClusterName:
    Value: !GetAtt EKSControlPlane.Outputs.EKSName
